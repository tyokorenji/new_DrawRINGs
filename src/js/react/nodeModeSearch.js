"use strict";

import { nodeModeType } from "./nodeModeType";

export function nodeModeSearch(target) {
    if (target === "Hexose") return nodeModeType.HEXOSE;
    else if (target === "Glc") return nodeModeType.GLC;
    else if (target === "Glc") return nodeModeType.GLC;
    else if (target === "Man") return nodeModeType.MAN;
    else if (target === "Gal") return nodeModeType.GAL;
    else if (target === "Gul") return nodeModeType.GUL;
    else if (target === "Alt") return nodeModeType.ALT;
    else if (target === "All") return nodeModeType.ALL;
    else if (target === "Tal") return nodeModeType.TAL;
    else if (target === "Ido") return nodeModeType.IDO;
    else if (target === "HexNAc") return nodeModeType.HEXNAC;
    else if (target === "GlcNAc") return nodeModeType.GLCNAC;
    else if (target === "ManNAc") return nodeModeType.MANNAC;
    else if (target === "GalNAc") return nodeModeType.GALNAC;
    else if (target === "GulNAc") return nodeModeType.GULNAC;
    else if (target === "AltNAc") return nodeModeType.ALTNAC;
    else if (target === "AllNAc") return nodeModeType.ALLNAC;
    else if (target === "TalNAc") return nodeModeType.TALNAC;
    else if (target === "IdoNAc") return nodeModeType.IDONAC;
    else if (target === "Hexosamine") return nodeModeType.HEXOSAMINE;
    else if (target === "GlcN") return nodeModeType.GLCN;
    else if (target === "ManN") return nodeModeType.MANN;
    else if (target === "GalN") return nodeModeType.GALN;
    else if (target === "GulN") return nodeModeType.GULN;
    else if (target === "AltN") return nodeModeType.ALTN;
    else if (target === "AllN") return nodeModeType.ALLN;
    else if (target === "TalN") return nodeModeType.TALN;
    else if (target === "IdoN") return nodeModeType.IDON;
    else if (target === "Hexuronate") return nodeModeType.HEXURONATE;
    else if (target === "GlcA") return nodeModeType.GLCA;
    else if (target === "ManA") return nodeModeType.MANA;
    else if (target === "GalA") return nodeModeType.GALA;
    else if (target === "GulA") return nodeModeType.GULA;
    else if (target === "AltA") return nodeModeType.ALTA;
    else if (target === "AllA") return nodeModeType.ALLA;
    else if (target === "TalA") return nodeModeType.TALA;
    else if (target === "IdoA") return nodeModeType.IDOA;
    else if (target === "Deoxyhexose") return nodeModeType.DEOXYHEXOSE;
    else if (target === "Qui") return nodeModeType.QUI;
    else if (target === "Rha") return nodeModeType.RHA;
    else if (target === "6dGul") return nodeModeType.D6GUL;
    else if (target === "6dAlt") return nodeModeType.D6ALT;
    else if (target === "6dTal") return nodeModeType.D6TAL;
    else if (target === "Fuc") return nodeModeType.FUC;
    else if (target === "DeoxyhexNAc") return nodeModeType.DEOXYHEXNAC;
    else if (target === "QuiNAc") return nodeModeType.QUINAC;
    else if (target === "RhaNAc") return nodeModeType.RHANAC;
    else if (target === "6dAltNAc") return nodeModeType.D6ALTNAC;
    else if (target === "6dTalNAc") return nodeModeType.D6TALNAC;
    else if (target === "FucNAc") return nodeModeType.FUCNAC;
    else if (target === "Di-deoxyhexose") return nodeModeType.DI_DEOXYHEXOSE;
    else if (target === "Oli") return nodeModeType.OIL;
    else if (target === "Tyv") return nodeModeType.TYV;
    else if (target === "Abe") return nodeModeType.ABE;
    else if (target === "Par") return nodeModeType.PAR;
    else if (target === "Dig") return nodeModeType.DIG;
    else if (target === "Col") return nodeModeType.COL;
    else if (target === "Pentose") return nodeModeType.PENTOSE;
    else if (target === "Ara") return nodeModeType.ARA;
    else if (target === "Lyx") return nodeModeType.LYX;
    else if (target === "Xyl") return nodeModeType.XYL;
    else if (target === "Rib") return nodeModeType.RIB;
    else if (target === "Deoxynonulosonate") return nodeModeType.DEOXYNONULOSONATE;
    else if (target === "Kdn") return nodeModeType.KDN;
    else if (target === "Neu5Ac") return nodeModeType.NEU5AC;
    else if (target === "Neu5Gc") return nodeModeType.NEU5GC;
    else if (target === "Neu") return nodeModeType.NEU;
    else if (target === "Sia") return nodeModeType.SIA;
    else if (target === "Di-deoxynonulosonate") return nodeModeType.DI_DEOXYNONULOSONATE;
    else if (target === "Pse") return nodeModeType.PSE;
    else if (target === "Leg") return nodeModeType.LEG;
    else if (target === "Aci") return nodeModeType.ACI;
    else if (target === "4eLeg") return nodeModeType.E4LEG;
    else if (target === "Unknown") return nodeModeType.UNKNOWN;
    else if (target === "Bac") return nodeModeType.BAC;
    else if (target === "LDmanHep") return nodeModeType.LDMANHEP;
    else if (target === "Kdo") return nodeModeType.KDO;
    else if (target === "Dha") return nodeModeType.DHA;
    else if (target === "DDmanHep") return nodeModeType.DDMANHEP;
    else if (target === "MurNAc") return nodeModeType.MURNAC;
    else if (target === "MurNGc") return nodeModeType.MURNGC;
    else if (target === "Mur") return nodeModeType.MUR;
    else if (target === "Assigned") return nodeModeType.ASSIGNED;
    else if (target === "Api") return nodeModeType.API;
    else if (target === "Fru") return nodeModeType.FRU;
    else if (target === "Tag") return nodeModeType.TAG;
    else if (target === "Sor") return nodeModeType.SOR;
    else if (target === "Psi") return nodeModeType.PSI;
    else return nodeModeType.NOT_SELECTED;
}